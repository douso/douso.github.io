<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git拉取指定部分目录</title>
    <url>/2020-07-24-Git%E6%8B%89%E5%8F%96%E6%8C%87%E5%AE%9A%E9%83%A8%E5%88%86%E7%9B%AE%E5%BD%95.html</url>
    <content><![CDATA[<h3 id="下载github项目中某个指定文件夹"><a href="#下载github项目中某个指定文件夹" class="headerlink" title="下载github项目中某个指定文件夹"></a>下载github项目中某个指定文件夹</h3><h4 id="例如下载以下链接文件夹"><a href="#例如下载以下链接文件夹" class="headerlink" title="例如下载以下链接文件夹"></a>例如下载以下链接文件夹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;firebase&#x2F;functions-samples&#x2F;tree&#x2F;master&#x2F;quickstarts&#x2F;time-server</span><br></pre></td></tr></table></figure>

<h4 id="将-“tree-master”-替换成-“trunk”，最终形成以下链接："><a href="#将-“tree-master”-替换成-“trunk”，最终形成以下链接：" class="headerlink" title="将 “tree/master” 替换成 “trunk”，最终形成以下链接："></a>将 <font color="#f60">“tree/master”</font> 替换成 <font color="#f60">“trunk”</font>，最终形成以下链接：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;firebase&#x2F;functions-samples&#x2F;trunk&#x2F;quickstarts&#x2F;time-server</span><br></pre></td></tr></table></figure>

<h4 id="使用svn检出即可"><a href="#使用svn检出即可" class="headerlink" title="使用svn检出即可"></a>使用svn检出即可</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn checkout https:&#x2F;&#x2F;github.com&#x2F;firebase&#x2F;functions-samples&#x2F;trunk&#x2F;quickstarts&#x2F;time-server</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql快速导入导出数据</title>
    <url>/2020-09-18-Mysql%E5%BF%AB%E9%80%9F%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE.html</url>
    <content><![CDATA[<h3 id="一、导出SQL文件"><a href="#一、导出SQL文件" class="headerlink" title="一、导出SQL文件"></a>一、导出SQL文件</h3><ul>
<li>导出数据库（包含数据）<br><code>mysqldump -u user -p pass dbname &gt; dbname.sql;</code></li>
<li>导出数据表（包含数据）<br><code>mysqldump -u user -p pass dbname tablename &gt; tablename.sql;</code></li>
<li>导出数据库结构<br><code>mysqldump -u user -p pass -d dbname &gt; dbname.sql;</code></li>
<li>导出数据表结构<br><code>mysqldump -u user -p pass -d dbname tablename &gt; tablename.sql;</code></li>
</ul>
<blockquote>
<p>说明：远程连接添加参数-h 主机地址 -P 端口</p>
</blockquote>
<h3 id="二、导入SQL文件"><a href="#二、导入SQL文件" class="headerlink" title="二、导入SQL文件"></a>二、导入SQL文件</h3><h4 id="1、系统命令"><a href="#1、系统命令" class="headerlink" title="1、系统命令"></a>1、系统命令</h4><p><code>mysql -u user -p pass dbname &lt; /home/dbname.sql;</code></p>
<h4 id="2、mysql命令"><a href="#2、mysql命令" class="headerlink" title="2、mysql命令"></a>2、mysql命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;</span><br><span class="line">use dbname;</span><br><span class="line">source &#x2F;home&#x2F;dbname.sql;</span><br></pre></td></tr></table></figure>

<h3 id="三、导出csv文件数据"><a href="#三、导出csv文件数据" class="headerlink" title="三、导出csv文件数据"></a>三、导出csv文件数据</h3><h4 id="1、系统命令-1"><a href="#1、系统命令-1" class="headerlink" title="1、系统命令"></a>1、系统命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -e &quot;set names gbk;select * from test where id &gt; 5&quot; | sed -e  &quot;s&#x2F;\t&#x2F;,&#x2F;g&quot; -e &quot;s&#x2F;NULL&#x2F;  &#x2F;g&quot; -e &quot;s&#x2F;\n&#x2F;\r\n&#x2F;g&quot; &gt; &#x2F;db&#x2F;test.csv</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在-e参数中实际使用了两条命令，一条是设置字符集，另一条是select语句</span><br><span class="line">&#x2F;&#x2F; 通过管道把每一行数据都通过正则来处理</span><br><span class="line">&#x2F;&#x2F; 字段之间的TAB键换为“,”，然后把字段值中的null替换为空字符</span><br><span class="line">&#x2F;&#x2F; 若不导出标题行，可以使用-N参数</span><br></pre></td></tr></table></figure>
<h4 id="2、mysql命令-1"><a href="#2、mysql命令-1" class="headerlink" title="2、mysql命令"></a>2、mysql命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用select .... into outfile的方法</span><br><span class="line">select * from test limit 1 into outfile &quot;&#x2F;db&#x2F;test1.csv&quot;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法整理</title>
    <url>/2020-09-18-MarkDown%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86.html</url>
    <content><![CDATA[<h2 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h2><h4 id="使用-号标记"><a href="#使用-号标记" class="headerlink" title="使用 # 号标记"></a>使用 # 号标记</h4><blockquote>
<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题</p>
</blockquote>
<h2 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h2><p><strong>段落的换行是使用两个以上空格加上回车</strong></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h4 id="使用成对的-或者-实现"><a href="#使用成对的-或者-实现" class="headerlink" title="使用成对的*或者_实现"></a>使用成对的*或者_实现</h4><blockquote>
<p>*斜体文本*<br>_斜体文本_<br>**粗体文本**<br>__粗体文本__<br>***粗斜体文本***<br>___粗斜体文本___</p>
</blockquote>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p><strong>一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西</strong></p>
<blockquote>
<p>***<br>---<br>___</p>
</blockquote>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p><strong>文字的两端加上两个波浪线 ~~ 即可</strong><br><del>示例文本</del></p>
<h2 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h2><p><strong>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格</strong><br><strong>有序列表使用数字并加上 . 号来表示</strong></p>
<h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p><strong>列表嵌套只需在子列表中的选项前面添加<font color="#f60">四个空格</font>即可</strong></p>
<h2 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h2><p><strong>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</strong><br><strong>另外区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推</strong></p>
<blockquote>
<p>&gt; 最外层<br>&gt;&gt; 第一层嵌套<br>&gt;&gt;&gt; 第二层嵌套</p>
</blockquote>
<h2 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h2><p><strong>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`）</strong></p>
<h4 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h4><p><strong>代码区块使用 4 个空格或者一个制表符（Tab 键），<font color="#f60">上边须留一空行</font></strong></p>
<pre><code>$ ip addr</code></pre><p><strong>你也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</strong></p>
<blockquote>
<p>```javascript<br>$(document).ready(function () {<br>   alert(‘RUNOOB’);<br>});<br>```</p>
</blockquote>
<h2 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h2><blockquote>
<p>[链接名称](链接地址)<br>或者<br>&lt;链接地址&gt;</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>JS无限分类数组转化成树形结构数据</title>
    <url>/2020-10-15-JS%E6%97%A0%E9%99%90%E5%88%86%E7%B1%BB%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E6%88%90%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%95%B0%E6%8D%AE.html</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// data [&#123;id:1001,pid:1002,name:'Apple'&#125;,...]</span></span><br><span class="line">toTree(data) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将数据存储为以 id 为 KEY 的 map 索引数据列</span></span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    map[item.id] = item</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> val = []</span><br><span class="line">  data.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 以当前遍历项的pid,去map对象中找到索引的id</span></span><br><span class="line">    <span class="keyword">const</span> parent = map[item.pid]</span><br><span class="line">    <span class="comment">// 如果找到索引，那么说明此项不在顶级当中,那么需要把此项添加到，他对应的父级中</span></span><br><span class="line">    <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">      (parent.children || (parent.children = [])).push(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果没有在map中找到对应的索引ID,那么直接把当前的item添加到val结果集中，作为顶级</span></span><br><span class="line">      val.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>Nodejs操作Sqlite3数据库</title>
    <url>/2020-10-15-Nodejs%E6%93%8D%E4%BD%9CSqlite3%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content><![CDATA[<h3 id="1、安装sqlite3模块"><a href="#1、安装sqlite3模块" class="headerlink" title="1、安装sqlite3模块"></a>1、安装sqlite3模块</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install sqlite3 --save</span><br></pre></td></tr></table></figure>

<h3 id="2、封装常用方法-sqlite-js"><a href="#2、封装常用方法-sqlite-js" class="headerlink" title="2、封装常用方法(sqlite.js)"></a>2、封装常用方法(sqlite.js)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * File: sqlite.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> sqlite3 = <span class="built_in">require</span>(<span class="string">'sqlite3'</span>).verbose();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> DB = DB || &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">DB.SqliteDB = <span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    DB.db = <span class="keyword">new</span> sqlite3.Database(file);</span><br><span class="line"> </span><br><span class="line">    DB.exist = fs.existsSync(file);</span><br><span class="line">    <span class="keyword">if</span>(!DB.exist)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Creating db file!"</span>);</span><br><span class="line">        fs.openSync(file, <span class="string">'w'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">DB.printErrorInfo = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Error Message:"</span> + err.message + <span class="string">" ErrorNumber:"</span> + err.errno);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">DB.SqliteDB.prototype.createTable = <span class="function"><span class="keyword">function</span>(<span class="params">sql</span>)</span>&#123;</span><br><span class="line">    DB.db.serialize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        DB.db.run(sql, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != err)&#123;</span><br><span class="line">                DB.printErrorInfo(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// tilesData format; [[level, column, row, content], [level, column, row, content]]</span></span><br><span class="line">DB.SqliteDB.prototype.insertData = <span class="function"><span class="keyword">function</span>(<span class="params">sql, objects</span>)</span>&#123;</span><br><span class="line">    DB.db.serialize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> stmt = DB.db.prepare(sql);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objects.length; ++i)&#123;</span><br><span class="line">            stmt.run(objects[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        stmt.finalize();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">DB.SqliteDB.prototype.queryData = <span class="function"><span class="keyword">function</span>(<span class="params">sql, callback</span>)</span>&#123;</span><br><span class="line">    DB.db.all(sql, <span class="function"><span class="keyword">function</span>(<span class="params">err, rows</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != err)&#123;</span><br><span class="line">            DB.printErrorInfo(err);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// deal query data.</span></span><br><span class="line">        <span class="keyword">if</span>(callback)&#123;</span><br><span class="line">            callback(rows);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">DB.SqliteDB.prototype.executeSql = <span class="function"><span class="keyword">function</span>(<span class="params">sql</span>)</span>&#123;</span><br><span class="line">    DB.db.run(sql, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != err)&#123;</span><br><span class="line">            DB.printErrorInfo(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">DB.SqliteDB.prototype.close = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    DB.db.close();</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// export SqliteDB.</span></span><br><span class="line">exports.SqliteDB = DB.SqliteDB;</span><br></pre></td></tr></table></figure>

<h3 id="3、引入封装文件使用"><a href="#3、引入封装文件使用" class="headerlink" title="3、引入封装文件使用"></a>3、引入封装文件使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Import SqliteDB.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> SqliteDB = <span class="built_in">require</span>(<span class="string">'./sqlite.js'</span>).SqliteDB;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> file = <span class="string">"Gis1.db"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sqliteDB = <span class="keyword">new</span> SqliteDB(file);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/// create table.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> createTileTableSql = <span class="string">"create table if not exists tiles(level INTEGER, column INTEGER, row INTEGER, content BLOB);"</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> createLabelTableSql = <span class="string">"create table if not exists labels(level INTEGER, longitude REAL, latitude REAL, content BLOB);"</span>;</span><br><span class="line"> </span><br><span class="line">sqliteDB.createTable(createTileTableSql);</span><br><span class="line"> </span><br><span class="line">sqliteDB.createTable(createLabelTableSql);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/// insert data.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> tileData = [[<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>], [<span class="number">1</span>, <span class="number">11</span>, <span class="number">11</span>], [<span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>], [<span class="number">1</span>, <span class="number">11</span>, <span class="number">9</span>]];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> insertTileSql = <span class="string">"insert into tiles(level, column, row) values(?, ?, ?)"</span>;</span><br><span class="line"> </span><br><span class="line">sqliteDB.insertData(insertTileSql, tileData);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/// query data.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> querySql = <span class="string">'select * from tiles where level = 1 and column &gt;= 10 and column &lt;= 11 and row &gt;= 10 and row &lt;=11'</span>;</span><br><span class="line"> </span><br><span class="line">sqliteDB.queryData(querySql, dataDeal);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/// update data.</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> updateSql = <span class="string">'update tiles set level = 2 where level = 1 and column = 10 and row = 10'</span>;</span><br><span class="line"> </span><br><span class="line">sqliteDB.executeSql(updateSql);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/// query data after update.</span></span><br><span class="line"> </span><br><span class="line">querySql = <span class="string">"select * from tiles where level = 2"</span>;</span><br><span class="line"> </span><br><span class="line">sqliteDB.queryData(querySql, dataDeal);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sqliteDB.close();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataDeal</span>(<span class="params">objects</span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objects.length; ++i)&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(objects[i]);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs</category>
      </categories>
  </entry>
  <entry>
    <title>python创建虚拟环境</title>
    <url>/2020-10-15-python%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83.html</url>
    <content><![CDATA[<h1 id="Windows创建"><a href="#Windows创建" class="headerlink" title="Windows创建"></a>Windows创建</h1><h3 id="1、安装虚拟模块"><a href="#1、安装虚拟模块" class="headerlink" title="1、安装虚拟模块"></a>1、安装虚拟模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure>

<h3 id="2、创建虚拟环境"><a href="#2、创建虚拟环境" class="headerlink" title="2、创建虚拟环境"></a>2、创建虚拟环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv D:\project\venv</span><br></pre></td></tr></table></figure>

<h3 id="3、激活虚拟环境"><a href="#3、激活虚拟环境" class="headerlink" title="3、激活虚拟环境"></a>3、激活虚拟环境</h3><p>运行安装目录下Script目录下的activate文件激活虚拟环境D:project\venv\Scripts\activate<br>看到命令提示符前边多了虚拟环境的名字，说明激活成功</p>
<hr>
<h1 id="linux下创建虚拟环境"><a href="#linux下创建虚拟环境" class="headerlink" title="linux下创建虚拟环境"></a>linux下创建虚拟环境</h1><h3 id="1、创建环境"><a href="#1、创建环境" class="headerlink" title="1、创建环境"></a>1、创建环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -m venv venv1</span><br></pre></td></tr></table></figure>

<h3 id="2、进入环境"><a href="#2、进入环境" class="headerlink" title="2、进入环境"></a>2、进入环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source venv1&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>

<h3 id="3、退出环境"><a href="#3、退出环境" class="headerlink" title="3、退出环境"></a>3、退出环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下强制关闭某个进程</title>
    <url>/2020-10-15-Linux%E4%B8%8B%E5%BC%BA%E5%88%B6%E5%85%B3%E9%97%AD%E6%9F%90%E4%B8%AA%E8%BF%9B%E7%A8%8B.html</url>
    <content><![CDATA[<p>查看进程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -tln</span><br></pre></td></tr></table></figure>

<p>关闭进程命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo fuser -k -n tcp 80</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>freessl.cn申请免费ssl服务器证书</title>
    <url>/2020-10-15-freessl-cn%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9ssl%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%81%E4%B9%A6.html</url>
    <content><![CDATA[<p><b>网站地址：<a href="https://freessl.cn/" target="_blank" rel="noopener">https://freessl.cn/</a></b></p>
<p><b>具体步骤：</b></p>
<ul>
<li>品牌选择有效期为1年的TrustAsia</li>
<li>输入要申请域名，例如：<a href="https://student.e-ai-edu.com" target="_blank" rel="noopener">https://student.e-ai-edu.com</a></li>
<li>直接点击“创建免费的SSL证书”进入下一步</li>
</ul>
<hr>
<ul>
<li><p>选择证书类型：</p>
<ul>
<li>RSA，传统算法。优点，支持好，老的客户端也支持。缺点，2048以下的都不算安全。密钥比较大，加密计算慢点（对比ECC）。</li>
<li>ECC，新算法，椭圆曲线。优点，密钥小，计算快。缺点，老客户端可能不支持。不过这年头，没什么老客户端了。</li>
</ul>
</li>
<li><p>选择验证类型：</p>
<ul>
<li>DNS，要把验证字符串，写入指定域名的TXT记录。</li>
<li>文件验证，把验证字符串，写入你的web服务器的，指定的路径的，文件中。</li>
</ul>
</li>
<li><p>CSR生成：</p>
<ul>
<li>离线生成，你的浏览器需要装个插件（KeyManager 1.2.14以上版本），我没装，所以没用过。</li>
<li>浏览器生成，edge，chrome，safari，ie11，都支持。唯独Firefox不支持。其他版本的ie，我不知道。但ie6肯定不支持。</li>
<li>我有CSR，自己用openssl生成一个证书请求，上传给它。这个请求有什么要求，不清楚，没试过。</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>CSS 实现录音声波动效</title>
    <url>/2020-10-15-CSS-%E5%AE%9E%E7%8E%B0%E5%BD%95%E9%9F%B3%E5%A3%B0%E6%B3%A2%E5%8A%A8%E6%95%88.html</url>
    <content><![CDATA[<p><b>HTML代码</b></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"liner-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"lines"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr5"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr7"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr9"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"hr hr10"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><b>CSS代码</b></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.hr</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:none;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f60</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: liner <span class="number">0.2s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">    <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hr1</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr2</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.9s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr3</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.8s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr4</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.7s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr5</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr6</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr7</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.4s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr8</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr9</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hr10</span>&#123;</span><br><span class="line">    <span class="attribute">animation-delay</span>: -<span class="number">1.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> liner &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>扫描动画特效</title>
    <url>/2020-10-15-%E6%89%AB%E6%8F%8F%E5%8A%A8%E7%94%BB%E7%89%B9%E6%95%88.html</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">		<span class="selector-class">.tech-recognition-scan</span> &#123;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">z-index</span><span class="selector-pseudo">:7</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">width</span><span class="selector-pseudo">:655px</span>;</span></span><br><span class="line">			filter:progid:DXImageTransform.Microsoft.Gradient(startColorStr="transparent",endColorStr="#3e88f1",gradientType="0");</span><br><span class="line"><span class="css">			<span class="selector-tag">border-bottom</span><span class="selector-pseudo">:3px</span> <span class="selector-tag">solid</span> <span class="selector-id">#3e88f1</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">animation</span><span class="selector-pseudo">:scan</span> 1<span class="selector-class">.2s</span> <span class="selector-tag">infinite</span>;</span></span><br><span class="line"><span class="css">			<span class="selector-tag">background</span><span class="selector-pseudo">:linear-gradient(180deg</span>,<span class="selector-tag">transparent</span>,<span class="selector-id">#3e88f1</span>)</span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="css">		<span class="keyword">@keyframes</span> scan &#123;</span></span><br><span class="line">			0% &#123;</span><br><span class="line"><span class="css">				<span class="selector-tag">height</span><span class="selector-pseudo">:0</span></span></span><br><span class="line">			&#125;</span><br><span class="line">			to &#123;</span><br><span class="line"><span class="css">				<span class="selector-tag">opacity</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">				<span class="selector-tag">height</span><span class="selector-pseudo">:415px</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tech-recognition-scan"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
  </entry>
  <entry>
    <title>JS实现blob对象上传和远程读取</title>
    <url>/2020-10-15-JS%E5%AE%9E%E7%8E%B0blob%E5%AF%B9%E8%B1%A1%E4%B8%8A%E4%BC%A0%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%AF%BB%E5%8F%96.html</url>
    <content><![CDATA[<p><b>远程文件以二进制流blob对象读取</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">"远程文件url"</span>;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>);</span><br><span class="line">xhr.responseType = <span class="string">"blob"</span>;</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> blob = <span class="keyword">this</span>.response;</span><br><span class="line">        <span class="comment">// 将Blob对象转换成 ArrayBuffer</span></span><br><span class="line">        <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">        reader.readAsArrayBuffer(blob);</span><br><span class="line">        reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 初始化项目</span></span><br><span class="line">            <span class="built_in">console</span>.log(reader.result);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>

<p><b>二进制blob对象上传</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态创建表单对象</span></span><br><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">formData.append(<span class="string">"file"</span>, blob,name); <span class="comment">// blob 为文件二进制流对象，name 为文件名（可选参数）</span></span><br><span class="line"><span class="comment">// 远程上传保存</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'http://localhost:8000/saveSb3'</span>,</span><br><span class="line">    type: <span class="string">'post'</span>,</span><br><span class="line">    processData: <span class="literal">false</span>,</span><br><span class="line">    contentType: <span class="literal">false</span>,</span><br><span class="line">    data:formData</span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(res))</span><br><span class="line">&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JS使用PCM录音格式进行百度语音识别</title>
    <url>/2020-10-15-JS%E4%BD%BF%E7%94%A8PCM%E5%BD%95%E9%9F%B3%E6%A0%BC%E5%BC%8F%E8%BF%9B%E8%A1%8C%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB.html</url>
    <content><![CDATA[<p><b>HTML代码</b></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>录音<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"开启"</span> <span class="attr">onclick</span>=<span class="string">"startRecord()"</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"停止"</span> <span class="attr">onclick</span>=<span class="string">"endRecord()"</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"上传翻译"</span> <span class="attr">onclick</span>=<span class="string">"transRecord()"</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"播放录音"</span> <span class="attr">onclick</span>=<span class="string">"playRecord()"</span> /&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">id</span>=<span class="string">"audio"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"recorder.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>),    </span></span><br><span class="line"><span class="javascript">    audio = <span class="built_in">document</span>.getElementById(<span class="string">'audio'</span>),    </span></span><br><span class="line"><span class="actionscript">    recorder = <span class="literal">null</span>;    </span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">startRecord</span><span class="params">()</span> </span>&#123;    </span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (!recorder) &#123; <span class="comment">// 第一次实例化对象    </span></span></span><br><span class="line"><span class="actionscript">        recorder = <span class="keyword">new</span> Recorder();    </span></span><br><span class="line"><span class="javascript">        recorder.ready().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;    </span></span><br><span class="line">            recorder.start();    </span><br><span class="line">        &#125;);    </span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;    </span></span><br><span class="line">        recorder.start();    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">endRecord</span> <span class="params">(e)</span> </span>&#123;    </span></span><br><span class="line">    recorder.stop();    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">transRecord</span> <span class="params">(e)</span> </span>&#123;    </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 转为PCM格式的Blob对象    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pcm = recorder.getPCMBlob(),    </span></span><br><span class="line"><span class="actionscript">        formdata = <span class="keyword">new</span> FormData();    </span></span><br><span class="line"><span class="actionscript">    formdata.append(<span class="string">'file'</span>, pcm);    </span></span><br><span class="line"><span class="actionscript">    fetch(<span class="string">'/speech'</span>, &#123;    </span></span><br><span class="line"><span class="actionscript">        method: <span class="string">'POST'</span>,    </span></span><br><span class="line"><span class="actionscript">        credentials: <span class="string">'include'</span>,    </span></span><br><span class="line">        headers: &#123;    </span><br><span class="line"><span class="actionscript">            <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span>    </span></span><br><span class="line">        &#125;,    </span><br><span class="line">        body: formdata    </span><br><span class="line"><span class="actionscript">    &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(response)</span> </span>&#123;    </span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> response.json();    </span></span><br><span class="line"><span class="actionscript">    &#125;, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;    </span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'请添加下阿里云的id和key'</span>);    </span></span><br><span class="line"><span class="actionscript">    &#125;).then(<span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;    </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(data);    </span></span><br><span class="line">    &#125;);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">playRecord</span><span class="params">()</span> </span>&#123;    </span></span><br><span class="line">    recorder.play(audio);    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><b>JS代码 ，recorder.js</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Recorder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.config = &#123;</span><br><span class="line">        sampleBits: <span class="number">16</span>,         <span class="comment">// 采样数位 8, 16</span></span><br><span class="line">        sampleRate: <span class="number">16000</span>       <span class="comment">// 采样率(1/6 44100)</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span>;              <span class="comment">// 录音文件总长度</span></span><br><span class="line">    <span class="keyword">this</span>.buffer = [];           <span class="comment">// 录音缓存</span></span><br><span class="line">    <span class="comment">// 录音实时获取数据</span></span><br><span class="line">    <span class="keyword">this</span>.input = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 记录数据，这儿的buffer是二维的</span></span><br><span class="line">        <span class="keyword">this</span>.buffer.push(<span class="keyword">new</span> <span class="built_in">Float32Array</span>(data));</span><br><span class="line">        <span class="keyword">this</span>.size += data.length;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 设置如采样位数的参数</span></span><br><span class="line">Recorder.prototype.setOption = <span class="function"><span class="keyword">function</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 修改采样率，采样位数配置</span></span><br><span class="line">    <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.config, option);</span><br><span class="line">&#125;</span><br><span class="line">Recorder.prototype.ready = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = <span class="keyword">new</span> (<span class="built_in">window</span>.AudioContext || <span class="built_in">window</span>.webkitAudioContext)();</span><br><span class="line">    <span class="comment">// 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096</span></span><br><span class="line">    <span class="comment">// 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。</span></span><br><span class="line">    <span class="keyword">this</span>.createScript = <span class="keyword">this</span>.context.createScriptProcessor || <span class="keyword">this</span>.context.createJavaScriptNode;</span><br><span class="line">    <span class="keyword">this</span>.recorder = <span class="keyword">this</span>.createScript.apply(<span class="keyword">this</span>.context, [<span class="number">4096</span>, <span class="number">1</span>, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 音频采集</span></span><br><span class="line">    <span class="keyword">this</span>.recorder.onaudioprocess = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.input(e.inputBuffer.getChannelData(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> navigator.mediaDevices.getUserMedia(&#123;</span><br><span class="line">            audio: <span class="literal">true</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// audioInput表示音频源节点</span></span><br><span class="line">            <span class="comment">// stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入</span></span><br><span class="line">            <span class="keyword">this</span>.audioInput = <span class="keyword">this</span>.context.createMediaStreamSource(stream);</span><br><span class="line">        &#125;, error =&gt; &#123;</span><br><span class="line">            <span class="keyword">switch</span> (error.code || error.name) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'PERMISSION_DENIED'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'PermissionDeniedError'</span>:</span><br><span class="line">                    Recorder.throwError(<span class="string">'用户拒绝提供信息。'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'NOT_SUPPORTED_ERROR'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'NotSupportedError'</span>:</span><br><span class="line">                    Recorder.throwError(<span class="string">'浏览器不支持硬件设备。'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'MANDATORY_UNSATISFIED_ERROR'</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'MandatoryUnsatisfiedError'</span>:</span><br><span class="line">                    Recorder.throwError(<span class="string">'无法发现指定的硬件设备。'</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    Recorder.throwError(<span class="string">'无法打开麦克风。异常信息:'</span> + (error.code || error.name));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line">Recorder.throwError = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始录音</span></span><br><span class="line">Recorder.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 清空数据</span></span><br><span class="line">    <span class="keyword">this</span>.buffer.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// audioInput 为声音源，连接到处理节点 recorder</span></span><br><span class="line">    <span class="keyword">this</span>.audioInput.connect(<span class="keyword">this</span>.recorder);</span><br><span class="line">    <span class="comment">// 处理节点 recorder 连接到扬声器</span></span><br><span class="line">    <span class="keyword">this</span>.recorder.connect(<span class="keyword">this</span>.context.destination);</span><br><span class="line">    <span class="comment">// 设置压缩参数</span></span><br><span class="line">    <span class="keyword">this</span>.inputSampleRate = <span class="keyword">this</span>.context.sampleRate;     <span class="comment">// 获取当前输入的采样率</span></span><br><span class="line">    <span class="keyword">this</span>.inputSampleBits = <span class="number">16</span>;                          <span class="comment">// 输入采样数位 8, 16</span></span><br><span class="line">    <span class="keyword">this</span>.outputSampleRate = <span class="keyword">this</span>.config.sampleRate;     <span class="comment">// 输出采样率</span></span><br><span class="line">    <span class="keyword">this</span>.oututSampleBits = <span class="keyword">this</span>.config.sampleBits;      <span class="comment">// 输出采样数位 8, 16</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 停止录音</span></span><br><span class="line">Recorder.prototype.stop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.recorder.disconnect();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 播放到audio标签中</span></span><br><span class="line"><span class="comment">// 参数表示audio元素</span></span><br><span class="line">Recorder.prototype.play = <span class="function"><span class="keyword">function</span> (<span class="params">audio</span>) </span>&#123;</span><br><span class="line">    audio.src = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">this</span>.getWAVBlob());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取PCM编码的二进制数据</span></span><br><span class="line">Recorder.prototype.getPCM = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.encodePCM();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取不压缩的PCM格式的编码</span></span><br><span class="line">Recorder.prototype.getPCMBlob = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ <span class="keyword">this</span>.getPCM() ]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取WAV编码的二进制数据</span></span><br><span class="line">Recorder.prototype.getWAV = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.encodeWAV();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取不压缩的WAV格式的编码</span></span><br><span class="line">Recorder.prototype.getWAVBlob = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ <span class="keyword">this</span>.getWAV() ], &#123; <span class="attr">type</span>: <span class="string">'audio/wav'</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 数据合并压缩</span></span><br><span class="line"><span class="comment">// 根据输入和输出的采样率压缩数据，</span></span><br><span class="line"><span class="comment">// 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，</span></span><br><span class="line"><span class="comment">// 所以输入数据中每隔3取1位</span></span><br><span class="line">Recorder.prototype.compress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 合并</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(<span class="keyword">this</span>.size);</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0</span>; <span class="comment">// 偏移量计算</span></span><br><span class="line">    <span class="comment">// 将二维数据，转成一维数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.buffer.length; i++) &#123;</span><br><span class="line">        data.set(<span class="keyword">this</span>.buffer[i], offset);</span><br><span class="line">        offset += <span class="keyword">this</span>.buffer[i].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    <span class="keyword">var</span> compression = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.inputSampleRate / <span class="keyword">this</span>.outputSampleRate);</span><br><span class="line">    <span class="keyword">var</span> length = data.length / compression;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(length);</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 循环间隔 compression 位取一位数据</span></span><br><span class="line">    <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">        result[index] = data[j];</span><br><span class="line">        j += compression;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回压缩后的一维数据</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换到我们需要的对应格式的编码</span></span><br><span class="line"><span class="comment"> * return &#123;DataView&#125;    pcm编码的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Recorder.prototype.encodePCM = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = <span class="keyword">this</span>.compress(),</span><br><span class="line">        sampleBits = <span class="built_in">Math</span>.min(<span class="keyword">this</span>.inputSampleBits, <span class="keyword">this</span>.oututSampleBits),</span><br><span class="line">        offset = <span class="number">0</span>,</span><br><span class="line">        dataLength = bytes.length * (sampleBits / <span class="number">8</span>),</span><br><span class="line">        buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(dataLength),</span><br><span class="line">        data = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入采样数据 </span></span><br><span class="line">    <span class="keyword">if</span> (sampleBits === <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++, offset++) &#123;</span><br><span class="line">            <span class="comment">// 范围[-1, 1]</span></span><br><span class="line">            <span class="keyword">var</span> s = <span class="built_in">Math</span>.max(<span class="number">-1</span>, <span class="built_in">Math</span>.min(<span class="number">1</span>, bytes[i]));</span><br><span class="line">            <span class="comment">// 8位采样位划分成2^8=256份，它的范围是0-255; 16位的划分的是2^16=65536份，范围是-32768到32767</span></span><br><span class="line">            <span class="comment">// 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。</span></span><br><span class="line">            <span class="comment">// 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。</span></span><br><span class="line">            <span class="keyword">var</span> val = s &lt; <span class="number">0</span> ? s * <span class="number">128</span> : s * <span class="number">127</span>;</span><br><span class="line">            val = <span class="built_in">parseInt</span>(val + <span class="number">128</span>);</span><br><span class="line">            data.setInt8(offset, val, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++, offset += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> s = <span class="built_in">Math</span>.max(<span class="number">-1</span>, <span class="built_in">Math</span>.min(<span class="number">1</span>, bytes[i]));</span><br><span class="line">            <span class="comment">// 16位直接乘就行了</span></span><br><span class="line">            data.setInt16(offset, s &lt; <span class="number">0</span> ? s * <span class="number">0x8000</span> : s * <span class="number">0x7FFF</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Recorder.prototype.encodeWAV = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sampleRate = <span class="built_in">Math</span>.min(<span class="keyword">this</span>.inputSampleRate, <span class="keyword">this</span>.outputSampleRate);</span><br><span class="line">    <span class="keyword">var</span> sampleBits = <span class="built_in">Math</span>.min(<span class="keyword">this</span>.inputSampleBits, <span class="keyword">this</span>.oututSampleBits);</span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">this</span>.encodePCM();</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">44</span>);</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> channelCount = <span class="number">1</span>;   <span class="comment">// 单声道</span></span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 资源交换文件标识符 </span></span><br><span class="line">    writeString(data, offset, <span class="string">'RIFF'</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 下个地址开始到文件尾总字节数,即文件大小-8 </span></span><br><span class="line">    data.setUint32(offset, <span class="number">36</span> + bytes.byteLength, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// WAV文件标志</span></span><br><span class="line">    writeString(data, offset, <span class="string">'WAVE'</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 波形格式标志 </span></span><br><span class="line">    writeString(data, offset, <span class="string">'fmt '</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 过滤字节,一般为 0x10 = 16 </span></span><br><span class="line">    data.setUint32(offset, <span class="number">16</span>, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 格式类别 (PCM形式采样数据) </span></span><br><span class="line">    data.setUint16(offset, <span class="number">1</span>, <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 通道数 </span></span><br><span class="line">    data.setUint16(offset, channelCount, <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 采样率,每秒样本数,表示每个通道的播放速度 </span></span><br><span class="line">    data.setUint32(offset, sampleRate, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 波形数据传输率 (每秒平均字节数) 单声道×每秒数据位数×每样本数据位/8 </span></span><br><span class="line">    data.setUint32(offset, channelCount * sampleRate * (sampleBits / <span class="number">8</span>), <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 快数据调整数 采样一次占用字节数 单声道×每样本的数据位数/8 </span></span><br><span class="line">    data.setUint16(offset, channelCount * (sampleBits / <span class="number">8</span>), <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 每样本数据位数 </span></span><br><span class="line">    data.setUint16(offset, sampleBits, <span class="literal">true</span>); offset += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 数据标识符 </span></span><br><span class="line">    writeString(data, offset, <span class="string">'data'</span>); offset += <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 采样数据总数,即数据总大小-44 </span></span><br><span class="line">    data.setUint32(offset, bytes.byteLength, <span class="literal">true</span>); offset += <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给pcm文件增加头</span></span><br><span class="line">    data = combineDataView(<span class="built_in">DataView</span>, data, bytes);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在data中的offset位置开始写入str字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TypedArrays&#125;</span> </span>data 二进制数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span>      </span>str  字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeString</span>(<span class="params">data, offset, str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        data.setUint8(offset + i, str.charCodeAt(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并二进制数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TypedArrays&#125;</span> </span>resultConstructor   需要合并成的数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;TypedArrays&#125;</span> </span>...arrays           需要合并的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineDataView</span>(<span class="params">resultConstructor, ...arrays</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> totalLength = <span class="number">0</span>,</span><br><span class="line">        offset = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 统计长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> arrays) &#123;</span><br><span class="line">        totalLength += arr.length || arr.byteLength;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建新的存放变量</span></span><br><span class="line">    <span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(totalLength),</span><br><span class="line">        result = <span class="keyword">new</span> resultConstructor(buffer);</span><br><span class="line">    <span class="comment">// 设置数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> arr <span class="keyword">of</span> arrays) &#123;</span><br><span class="line">        <span class="comment">// dataview合并</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.byteLength; i &lt; len; ++i) &#123;</span><br><span class="line">            result.setInt8(offset, arr.getInt8(i));</span><br><span class="line">            offset += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// export default Recorder;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">var val = s &lt; 0 ? s * 0x8000 : s * 0x7FFF;</span></span><br><span class="line"><span class="comment">val = parseInt(255 / (65535 / (val + 32768)));</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p><b>案例项目地址：</b><br><a href="https://github.com/difei0412/recorder" target="_blank" rel="noopener">https://github.com/difei0412/recorder</a><br>该项目可实现录音转wav和pcm格式</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>vue禁止页面滑动</title>
    <url>/2020-10-15-vue%E7%A6%81%E6%AD%A2%E9%A1%B5%E9%9D%A2%E6%BB%91%E5%8A%A8.html</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();&#125;, &#123; <span class="attr">passive</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><b>说明：</b></p>
<ul>
<li>e.preventDefault() 阻止元素发生默认的行为</li>
<li>e.stopPropagation() 阻止事件冒泡到父元素，阻止任何父事件处理程序被执行</li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
  </entry>
  <entry>
    <title>vim多行批量空格和注释操作</title>
    <url>/2020-10-15-vim%E5%A4%9A%E8%A1%8C%E6%89%B9%E9%87%8F%E7%A9%BA%E6%A0%BC%E5%92%8C%E6%B3%A8%E9%87%8A%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<ul>
<li><p>在10行和112行之间插入4空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:10,112 s&#x2F;^&#x2F;    &#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在10行和112行之间后退4空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:10,112 s&#x2F;^    &#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:起始行号,结束行号s&#x2F;^&#x2F;注释符&#x2F;</span><br></pre></td></tr></table></figure>
</li>
<li><p>去注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:起始行号,结束行号s&#x2F;^注释符&#x2F;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>voicetube 初始化youtube播放器时出错</title>
    <url>/2020-10-15-voicetube-%E5%88%9D%E5%A7%8B%E5%8C%96youtube%E6%92%AD%E6%94%BE%E5%99%A8%E6%97%B6%E5%87%BA%E9%94%99.html</url>
    <content><![CDATA[<p><b>1、首先必须先下载youtube应用</b></p>
<p><b>2、在手机管家中进入“权限隐私”</b><br><img src="../img/201902201550627497708841.png" width="300px" alt="图片" align="center"></p>
<p><b>3、首先必须先下载youtube应用</b><br><img src="../img/201902201550627607746298.png" width="300px" alt="图片"></p>
<p><b>4、然后再打开voicetube就可以开心的看视频了^_^</b></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>全球杂志免费下载</title>
    <url>/2020-10-15-%E5%85%A8%E7%90%83%E6%9D%82%E5%BF%97%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD.html</url>
    <content><![CDATA[<p>这个网站即时收录全球上万本杂志期刊，任何人无需注册就可以完全免费地下载这些杂志的PDF版本</p>
<p><a href="https://magazinelib.com/" target="_blank" rel="noopener">magazinelib.com</a></p>
<p><b>你可以按照以下方式搜索期刊：</b></p>
<ul>
<li>按目录搜索：网站首页顶端有11个目录，每个目录下有对应子目录；</li>
<li>按国家/地区搜索：网站首页最下端可以看到国家分类；</li>
<li>自己搜索：直接键入自己感兴趣的期刊名，例如「The Economist」</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Centos防火墙设置与端口开放的方法</title>
    <url>/2020-10-15-Centos%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE%E4%B8%8E%E7%AB%AF%E5%8F%A3%E5%BC%80%E6%94%BE%E7%9A%84%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p>Centos升级到7之后，内置的防火墙已经从iptables变成了firewalld。所以，端口的开启还是要从两种情况来说明的，即iptables和firewalld。更多关于CentOs防火墙的最新内容，请参考Redhat官网。</p>
<p><b>一、iptables</b></p>
<p>1.打开/关闭/重启防火墙</p>
<p>开启防火墙(重启后永久生效)：chkconfig iptables on</p>
<p>关闭防火墙(重启后永久生效)：chkconfig iptables off</p>
<p>开启防火墙(即时生效，重启后失效)：service iptables start</p>
<p>关闭防火墙(即时生效，重启后失效)：service iptables stop</p>
<p>重启防火墙:service iptables restartd</p>
<p>2.查看打开的端口</p>
<p>/etc/init.d/iptables status</p>
<p>3.打开某个端口(以8080为例)</p>
<p>（1）开启端口</p>
<p>iptables -A INPUT -p tcp –dport 8080 -j ACCEPT</p>
<p>（2）保存并重启防火墙</p>
<p>/etc/rc.d/init.d/iptables save/etc/init.d/iptables restart</p>
<p>4.打开49152~65534之间的端口</p>
<p>iptables -A INPUT -p tcp –dport 49152:65534 -j ACCEPT  </p>
<p>同样，这里需要对设置进行保存，并重启防火墙。</p>
<p>5.其他打开方式</p>
<p>我们还可以通过修改/etc/sysconfig/iptables文件的方式开启端口，如下</p>
<p>vi /etc/sysconfig/iptables</p>
<p>然后在文件中增加一行</p>
<p>-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p>
<p>参数说明:</p>
<pre><code>–A 参数就看成是添加一条规则

–p 指定是什么协议，我们常用的tcp 协议，当然也有udp，例如53端口的DNS

–dport 就是目标端口，当数据从外部进入服务器为目标端口

–sport 数据从服务器出去，则为数据源端口使用

–j 就是指定是 ACCEPT -接收 或者 DROP 不接收</code></pre><p><b>二、firewalld</b></p>
<p>Centos7默认安装了firewalld，如果没有安装的话，可以使用 yum install firewalld firewalld-config进行安装。</p>
<p>1.启动防火墙</p>
<p>systemctl start firewalld</p>
<p>2.禁用防火墙</p>
<p>systemctl stop firewalld</p>
<p>3.设置开机启动</p>
<p>systemctl enable firewalld</p>
<p>4.停止并禁用开机启动</p>
<p>sytemctl disable firewalld</p>
<p>5.重启防火墙</p>
<p>firewall-cmd –reload</p>
<p>6.查看状态</p>
<p>systemctl status firewalld或者 firewall-cmd –state</p>
<p>7.查看版本</p>
<p>firewall-cmd –version</p>
<p>8.查看帮助</p>
<p>firewall-cmd –help</p>
<p>9.查看区域信息</p>
<p>firewall-cmd –get-active-zones</p>
<p>10.查看指定接口所属区域信息</p>
<p>firewall-cmd –get-zone-of-interface=eth0</p>
<p>11.拒绝所有包</p>
<p>firewall-cmd –panic-on</p>
<p>12.取消拒绝状态</p>
<p>firewall-cmd –panic-off</p>
<p>13.查看是否拒绝</p>
<p>firewall-cmd –query-panic</p>
<p>14.将接口添加到区域(默认接口都在public)</p>
<p>firewall-cmd –zone=public –add-interface=eth0</p>
<p>(永久生效再加上 –permanent 然后reload防火墙)</p>
<p>15.设置默认接口区域</p>
<p>firewall-cmd –set-default-zone=public(立即生效，无需重启)</p>
<p>16.更新防火墙规则</p>
<p>firewall-cmd –reload或firewall-cmd –complete-reload</p>
<p>(两者的区别就是第一个无需断开连接，就是firewalld特性之一动态添加规则，第二个需要断开连接，类似重启服务)</p>
<p>17.查看指定区域所有打开的端口</p>
<p>firewall-cmd –zone=public –list-ports</p>
<p>18.在指定区域打开端口（记得重启防火墙）</p>
<p>firewall-cmd –zone=public –add-port=80/tcp (永久生效再加上 –permanent)</p>
<p>说明：<br>        –zone 作用域<br>        –add-port=8080/tcp 添加端口，格式为：端口/通讯协议<br>        –permanent #永久生效，没有此参数重启后失效</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Centos配置本地的cloud9开发环境</title>
    <url>/2020-10-15-Centos%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E7%9A%84cloud9%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>说到（前端）在线IDE开发环境，cloud9是不能绕过的，cloud9支持很多语言，默认支持的就有Node.js，Python，Ruby，PHP，Go，更逆天的是，他还支持数据库，包括MySQL，MongoDB，Redis，SQLite。但问题在于它是国外公司开发的，其基于web的特性在国内访问因为速度的问题，体验不是很好。另外，就目前而言，cloud9的注册已经强制要求填写个人的国外信用卡信息，这无形中挡住了很多人（比如我）的使用，幸好cloud9的在线开发环境已经在Github上开源了，链接在此,所以我们可以在本地部署一个类似的环境。</p>
<h2 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h2><p>1、安装node、npm</p>
<pre><code>yum install nodejs npm</code></pre><p>2、安装git</p>
<pre><code>yum install git</code></pre><p>3、创建文件夹并进入</p>
<pre><code>mkdir ~/cloud9

cd ~/cloud9</code></pre><p>4、将线上的代码使用git克隆到本地</p>
<pre><code>git clone git://github.com/c9/core.git c9sdk</code></pre><p>5、进入目录  </p>
<pre><code>cd c9sdk</code></pre><p>6、安装依赖</p>
<pre><code>npm install

scripts/install-sdk.sh

// 如出现错误PTY is not supported，安装tmux以使在线IDE开发环境的控制台可用

yum install tmux</code></pre><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>1、使用nodejs的forever模块 以达到cloud9开发环境后台运行的效果</p>
<p>安装forever：npm install forever -gd</p>
<p>开启服务：forever start server.js </p>
<p>开启远程服务：forever start server.js -l 0.0.0.0 -p 端口 -a 用户名：密码 -w 指定你自己的工作目录</p>
<pre><code>参数说明：

    （1） 显示此帮助消息  --help  

    （2）从配置文件加载配置。覆盖命令行选项。 -c，--config &lt;value&gt;  默认值：&lt;null&gt;

    （3）使用特定组运行子进程。 -g，--group &lt;value&gt;  默认值：&lt;false&gt;    

    （4）以特定用户身份运行子进程。-u，--user &lt;value&gt;  默认值：&lt;false&gt;    

    （5）激活调试模式。 -d，--   默认值：&lt;false&gt;    

    （6）debug禁用浏览器的自动打开。 -s，--silent  

    （7）定义在Cloud9服务器启动后执行的操作。  -a，--action &lt;value&gt;  默认值：&lt;null&gt;    

    （8）Cloud9将从其提供服务的IP地址。 -l，--ip &lt;value&gt;  默认值：&lt;127.0.0.1&gt;   

    （9）Cloud9将从其提供服务的端口号。 -p，--port &lt;value&gt; 默认值：&lt;8181&gt;    

    （10）将在Cloud9中加载的工作空间的路径 -w，--workspace &lt;value&gt; （可能是相对或绝对的）。默认值：&lt;安装目录&gt;  </code></pre><p>2、应用默认开启的是8181端口，所以在我们正常启动后，访问<span><a href="http://127.0.0.1:8181" target="_blank" rel="noopener">http://127.0.0.1:8181</a></span>即可，运行cloud9的浏览器推荐Chrome</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>39 本书，一个创业 CEO 的成长记</title>
    <url>/2020-10-20-39-%E6%9C%AC%E4%B9%A6%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%88%9B%E4%B8%9A-CEO-%E7%9A%84%E6%88%90%E9%95%BF%E8%AE%B0.html</url>
    <content><![CDATA[<p>这个“入门级”书单分为 7 个版块，基本涵盖了过去一年我作为一个菜鸟在创业路上遇到的各种困扰，分别是：Idea，人才，产品，风险投资，市场 &amp; 营销，管理，自身积累。书永远无法给出答案，但思考和想象力可以，希望对刚刚起步的创业者或者准备加入创业大军的人们有点启发和帮助吧。</p>
<p><b style="font-size:16px">Idea － 思考者的世界处处都是台风口</b></p>
<ul>
<li>《时间简史》- Stephen Hawking. 任何常识和定律都是局限于某种纬度的。</li>
<li>《古今数学思想》- Morris Kline. 数学是万物学科的基础。</li>
<li>《Zero to One》- Peter Thiel. 一个好的点子永远都是从一个问题出发的。</li>
<li>《Out of Control》- Kevin Kelly. 思维方式，是生产力，也是商业模式。</li>
<li>《Outliers》- Malcolm Gladwell. 成功启示录的另辟蹊径。</li>
<li>《免费》- 克里斯 安德森. 互联网思维之一。</li>
<li>《长尾理论》- 克里斯 安德森. 互联网思维之二。</li>
<li>《思考，快与慢》- 丹尼尔 卡尼曼. 烧脑巨作。</li>
<li>《黑天鹅》- 尼古拉斯 塔勒布. 这个世界其实是由不可预知来主导的。</li>
</ul>
<p><b style="font-size:16px">人才 － 所有的问题，归根结底都是人的问题</b></p>
<ul>
<li>《将心注入》- 霍华德 舒尔茨. 没有员工，只有伙伴。</li>
<li>《人性的弱点》- 戴尔 卡耐基. 人际关系与心理学的巅峰之作。</li>
<li>《黑客与画家》- Paul Graham. 程序员本质上都是艺术家。</li>
</ul>
<p><b style="font-size:16px">产品 － 不仅要满足需求，还要满足想象力</b></p>
<ul>
<li>《Lean Startup》- Eric Ries. 精益创业的秘密。</li>
<li>《The Startup Owner’s Manual》- Steve Blank. 创业公司是一个在探寻可持续商业模式的临时组织。</li>
<li>《Business Model Generation》- Alexander Osterwalder. 简单有效的商业模型思考力。</li>
<li>《Inspired》- Marty Cagan. 打造用户喜欢的产品。</li>
</ul>
<p><b style="font-size:16px">风险投资 － 那些关于钱，资源，信心，欲望和野心的传说</b></p>
<ul>
<li>《风险投资交易》- Brad Feld，Jason Mendelson. 关于投资人，Term Sheet，SPA，和谈判技巧的全部细节。</li>
<li>《门口的野蛮人》- Bryan Burrough，John Helyar. 走进金融帝国的内心世界。</li>
<li>《聪明的投资者》- Benjamin Graham. 从投资人的角度看一个公司的价值。</li>
<li>《Geting More》- Stuart Diamond. 谈判的技巧。</li>
</ul>
<p><b style="font-size:16px">市场 &amp; 营销 － 找到他们，理解他们，满足他们，并成为朋友</b></p>
<ul>
<li>《乌合之众》- 古斯塔夫 勒庞. 理解和敬畏群体的力量。</li>
<li>《第三种黑猩猩》- 贾雷德 戴蒙德. 探究世界最好的办法是从理解人自身开始。</li>
<li>《怪诞行为学》- 丹 艾瑞里. 关于消费者的一切秘密。</li>
<li>《引爆点》- Malcolm Gladwell. 寻找那个传说中的杠杆支点。</li>
<li>《影响力》- Robert Cialdini. 互惠，承诺和一致，社会认同，喜好，权威，稀缺。</li>
<li>《Presentation Zen》- Garr Reynolds. 演讲，即是艺术，也是科学。</li>
<li>《乔布斯的魔力演讲》- 卡迈恩 加l洛. 人们会忘记你说过的话，会忘记你做过的事，但是人们永远不会忘记你带给他们的感觉。</li>
</ul>
<p><b style="font-size:16px">管理 － 请记住，这里没有现成的标准和答案</b></p>
<ul>
<li>《Rework》- Jason Fried. 简单的总是最有效的。</li>
<li>《创业36条军规》- 孙陶然. 无法全部认同，但绝对不能忽视的道理。</li>
<li>《The Hard Thing About Hard Things》- Ben Horowitz. 关于创业路上那些没有答案的答案。</li>
<li>《打造 Facebook》- 王淮. 为什么是硅谷，为什么是 Facebook。</li>
</ul>
<p><b style="font-size:16px">自身积累 － 向伟人学习，向成功者和失败者学习，向理想和现实学习</b></p>
<ul>
<li>《曼德拉传》- 安东尼 桑普森. 关于自由，奋斗，和理想主义的光辉岁月。</li>
<li>《史蒂夫 乔布斯传》- Walter Isaacson. 那些疯狂到认为可以改变世界的人，最终改变了世界。</li>
<li>《创新者的窘境》- 克莱顿 克里斯坦森. 破坏性创新。</li>
<li>《孵化 Twitter》- Nick Bilton. 有人的地方，就有江湖。</li>
<li>《一网打尽》- Brad Stone. 洞悉商业帝国的崛起与建立。</li>
<li>《大败局》- 吴晓波. 人们从历史中学到的唯一道理就是人们从来都不从历史中学习任何道理。</li>
<li>《野蛮生长》- 冯仑. 中国民企发展之心路历程。</li>
<li>《理想丰满》- 冯仑. 中国民企发展之心灵历程</li>
</ul>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
  </entry>
  <entry>
    <title>使用k3d搭建k3s集群</title>
    <url>/2020-11-24-%E4%BD%BF%E7%94%A8k3d%E6%90%AD%E5%BB%BAk3s%E9%9B%86%E7%BE%A4.html</url>
    <content><![CDATA[<p><a href="https://k3d.io/" target="_blank" rel="noopener"><b>k3d官网</b></a></p>
<h3 id="1、安装k3d"><a href="#1、安装k3d" class="headerlink" title="1、安装k3d"></a>1、安装k3d</h3><ul>
<li><p>Windows<br>下载<a href="https://github.com/rancher/k3d/releases" target="_blank" rel="noopener">最新版本</a>文件，放在指定目录，并加入环境变量即可使用</p>
</li>
<li><p>Linux</p>
<blockquote>
<p>wget -q -O - <a href="https://raw.githubusercontent.com/rancher/k3d/main/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/rancher/k3d/main/install.sh</a> | bash<br>或<br>curl -s <a href="https://raw.githubusercontent.com/rancher/k3d/main/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/rancher/k3d/main/install.sh</a> | bash</p>
</blockquote>
</li>
</ul>
<h3 id="2、k3d使用"><a href="#2、k3d使用" class="headerlink" title="2、k3d使用"></a>2、k3d使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看版本</span><br><span class="line">k3d version</span><br><span class="line"></span><br><span class="line"># 查看集群</span><br><span class="line">k3d cluster list</span><br><span class="line"></span><br><span class="line"># 创建集群</span><br><span class="line">k3d cluster create demo --servers 3 --agents 3</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>m3u8批量下载视频</title>
    <url>/2020-12-01-m3u8%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91.html</url>
    <content><![CDATA[<p><a href="https://github.com/nilaoda/N_m3u8DL-CLI/releases" target="_blank" rel="noopener">工具地址</a></p>
<p>下载自带ffmpeg和可视化工具软件包，<br>例如：N_m3u8DL-CLI_v2.8.8_with_ffmpeg_and_SimpleG.zip</p>
<blockquote>
<p><b>批量下载方法：</b><br>m3u8地址统一放入txt文件，格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件名1,链接1</span><br><span class="line">文件名2,链接2</span><br><span class="line">文件名3,链接3</span><br></pre></td></tr></table></figure>
<p>然后将txt文件拖入工具的m3u8地址，点击GO即可开始下载</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Go环境安装和vscode插件安装</title>
    <url>/2020-12-24-Go%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%92%8Cvscode%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85.html</url>
    <content><![CDATA[<h3 id="1、Go环境安装"><a href="#1、Go环境安装" class="headerlink" title="1、Go环境安装"></a>1、Go环境安装</h3><p>安装包下载地址: <a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a><br>根据网站下载提示进行安装即可</p>
<h3 id="2、vscode插件安装"><a href="#2、vscode插件安装" class="headerlink" title="2、vscode插件安装"></a>2、vscode插件安装</h3><ul>
<li>Go有一个全球模块代理，设置一下代理再去安装，就可以十分顺利的进行</li>
<li>原网站 <a href="https://goproxy.io/" target="_blank" rel="noopener">https://goproxy.io/</a></li>
<li>根据网站推荐设置，设置完毕后<font color="#f60">重启vscode</font></li>
<li>在 VS Code 中，使用快捷键：command+shift+P，然后键入：go:install/update tools，将所有 17 个插件都勾选上，然后点击 OK 即开始安装。</li>
</ul>
<h3 id="3、go新的包管理模式"><a href="#3、go新的包管理模式" class="headerlink" title="3、go新的包管理模式"></a>3、go新的包管理模式</h3><blockquote>
<p>新的包管理模式解决了以上问题</p>
<ul>
<li>自动下载依赖包</li>
<li>项目不必放在GOPATH/src内了</li>
<li>项目内会生成一个go.mod文件，列出包依赖</li>
<li>所以来的第三方包会准确的指定版本号</li>
<li>对于已经转移的包，可以用replace 申明替换，不需要改代码</li>
</ul>
</blockquote>
<p><b style="font-size: 18px">添加环境变量 GO111MODULE 为 on 或者auto</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GO111MODULE&#x3D;auto</span><br></pre></td></tr></table></figure>

<p><b style="font-size: 18px">创建一个项目</b><br>首先，在$GOPATH/src路径外的你喜欢的地方创建一个目录，cd 进入目录，新建一个hello.go文件，内容如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(&quot;Hello, world!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b style="font-size: 18px">初始化模块</b><br>在当前目录下，命令行运行 go mod init + 模块名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go mod init hello</span><br></pre></td></tr></table></figure>
<p>运行完后，会在当前项目目录下生成一个go.mod 文件，这是一个关键文件，之后的包的管理都是通过这个文件管理。</p>
<blockquote>
<p>官方说明：除了go.mod之外，go命令还维护一个名为go.sum的文件，其中包含特定模块版本内容的预期加密哈希<br>go命令使用go.sum文件确保这些模块的未来下载检索与第一次下载相同的位，以确保项目所依赖的模块不会出现意外更改，无论是出于恶意、意外还是其他原因。 go.mod和go.sum都应检入版本控制。<br>go.sum 不需要手工维护，所以可以不用太关注。</p>
</blockquote>
<p>生成出来的文件包含模块名称和当前的go版本号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module hello</span><br><span class="line"></span><br><span class="line">go 1.15</span><br></pre></td></tr></table></figure>

<p><b style="font-size: 18px">go.mod工作原理</b><br>接下来，让你的项目依赖一下第三方包<br>以大部分人都熟悉的beego为例吧！<br>修改Hello.go文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;github.com&#x2F;astaxie&#x2F;beego&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按照过去的做法，要运行hello.go需要执行go get命令下载beego包到 $GOPATH/src<br><b>但是，使用了新的包管理就不在需要这样做了</b><br>直接 <code>go run hello.go</code><br>稍等片刻… go 会自动查找代码中的包，下载依赖包，并且把具体的依赖关系和版本写入到go.mod和go.sum文件中。<br>查看go.mod，它会变成这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module hello</span><br><span class="line"></span><br><span class="line">go 1.12</span><br><span class="line"></span><br><span class="line">require github.com&#x2F;astaxie&#x2F;beego v1.11.1</span><br></pre></td></tr></table></figure>
<p><code>require</code> 关键字是引用，后面是包，最后v1.11.1 是引用的版本号</p>
<p>参考文章：<a href="https://zhuanlan.zhihu.com/p/60703832" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/60703832</a></p>
]]></content>
  </entry>
  <entry>
    <title>免费网站托管</title>
    <url>/2021-05-08-%E5%85%8D%E8%B4%B9%E7%BD%91%E7%AB%99%E6%89%98%E7%AE%A1.html</url>
    <content><![CDATA[<h3 id="静态页面托管"><a href="#静态页面托管" class="headerlink" title="静态页面托管"></a>静态页面托管</h3><p><a href="https://app.netlify.com/" target="_blank" rel="noopener">netlify</a></p>
<h3 id="虚拟空间托管"><a href="#虚拟空间托管" class="headerlink" title="虚拟空间托管"></a>虚拟空间托管</h3><p><a href="https://infinityfree.net/" target="_blank" rel="noopener">InfinityFree</a></p>
]]></content>
  </entry>
</search>
